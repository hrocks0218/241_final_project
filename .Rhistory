ggplot(data = results_response
, aes(x = Prompt, y = Response, fill = Share)) +
geom_tile() +
facet_grid(rows = vars(arm_story, arm_level)
, cols = vars(ideology_bin)) +
scale_fill_distiller(direction = 1, palette = 2) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)
, legend.position = "none")
# Histogram of familiarity
plot_familiarity = ggplot(data = results_clean_lim %>% filter(!is.na(ubi_familiarity)) %>%
group_by(ubi_familiarity, ideology, ideology_bin) %>%
summarise(Count = n()) %>%
rename("Ideology" = ideology, "UBI Familiarity" = ubi_familiarity)
, aes(x = `UBI Familiarity`, y = Count, fill = Ideology)) +
geom_bar(stat="identity", show.legend = FALSE) +
facet_grid( ~ ideology_bin) +
scale_fill_brewer(type = "div", palette = 5, direction = -1, aesthetics = "fill") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Heat map of number UBI like
plot_ubi = ggplot(data = results_clean_lim %>% filter(!is.na(ubi_familiarity)) %>%
group_by(ubi_familiarity, ideology) %>%
summarise("Average UBI Rank" = mean(ubi_number)) %>%
rename("Ideology" = ideology, "UBI Familiarity" = ubi_familiarity)
, aes(x = `UBI Familiarity`, y = Ideology, fill = `Average UBI Rank`)) +
geom_tile() +
scale_fill_distiller(direction = 1, palette = 2) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)
, legend.position = "right")
grid.arrange(plot_familiarity, plot_ubi
, nrow = 2)
model_libfair = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibfair), clusters_in = NA)
model_libpure = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibpure), clusters_in = NA)
model_confair = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconfair), clusters_in = NA)
model_conpure = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconpure), clusters_in = NA)
stargazer(model_libfair$lm, model_libpure$lm
, model_confair$lm, model_conpure$lm
, se = list(model_libfair$se_robust, model_libpure$se_robust
, model_confair$se_robust, model_conpure$se_robust)
, type = stargazer_type, header = F
, title = "By Arm"
, column.labels = c("Lib + Fair", "Lib + Pure"
, "Con + Fair", "Con + Pure")
, covariate.labels = c("Base Only Treatment", "Base + Extension Treatment")
, dep.var.caption  = "Four Study Arms"
, dep.var.labels   = "UBI Ranking"
, notes = "HC Robust Standard Errors"
, report = ('v*c*sp')
, font.size        = "small"
, column.sep.width = "1pt"
, label            = "tab:allarmsmodel"
)
# Gender
model_conpure_gender = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level + gender
, data = results_armconpure)
, clusters_in = NA)
# Familiarity
model_conpure_familiarity = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level + ubi_familiarity_bin
, data = results_armconpure)
, clusters_in = NA)
# Reaction
results_armconpure_reaction = results_armconpure %>%
mutate(purity_q2_repulsed_bin_f = case_when(is.na(purity_q2_repulsed_bin) ~ 0
, TRUE ~ as.numeric(as.character(purity_q2_repulsed_bin))) %>% factor()
, purity_q4_relieved_bin_f = case_when(is.na(purity_q4_relieved_bin) ~ 0
, TRUE ~ as.numeric(as.character(purity_q4_relieved_bin))) %>% factor()
)
# NOTE - could we keep both arms in a single regression? what would that tell us? (see next cell)
# model_conpure_reaction_bas = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level + purity_q2_repulsed_bin_f
#                                                      , data = results_armconpure_reaction %>% filter(arm_level != "Extension"))
#                                               , clusters_in = NA)
model_conpure_reaction_ext = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level + purity_q2_repulsed_bin_f * purity_q4_relieved_bin_f
, data = results_armconpure_reaction) # %>% filter(arm_level != "Base"))
, clusters_in = NA)
stargazer(model_conpure$lm
, model_conpure_gender$lm
, model_conpure_familiarity$lm
# , model_conpure_reaction_bas$lm
, model_conpure_reaction_ext$lm
, type = stargazer_type, header = F
, se = list(model_conpure$se_robust
, model_conpure_gender$se_robust
, model_conpure_familiarity$se_robust
# , model_conpure_reaction_bas$se_robust
, model_conpure_reaction_ext$se_robust
)
, title = "Conservative + Purity Treatment Arm Interaction Specifications"
, column.labels = c("No Covariates", "Gender", "UBI Familiarity", "Reaction") #" (Base)", "Reaction (Extension)")
, covariate.labels = c("Base Only Treatment", "Base + Extension Treatment"
, "Male", "Familiar w/ UBI"
, "Repulsed", "Relieved", "Repulsed then Relieved")
, dep.var.caption  = "Con + Pure Arm Only"
, dep.var.labels   = "UBI Ranking"
, notes = "HC Robust Standard Errors"
, report = ('v*c*sp')
, font.size        = "small"
, column.sep.width = "1pt"
, label            = "tab:model3"
)
flowchart_img = readPNG("images/flowchart.png")
grid.raster(flowchart_img)
prelim_model_libfair_prelim = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibfair %>%
filter(recruitment_wave %in% c("Wave1", "Wave2")))
, clusters_in = NA)
prelim_model_libpure_prelim = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibpure %>%
filter(recruitment_wave %in% c("Wave1", "Wave2")))
, clusters_in = NA)
prelim_model_confair_prelim = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconfair %>%
filter(recruitment_wave %in% c("Wave1", "Wave2")))
, clusters_in = NA)
prelim_model_conpure_prelim = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconpure %>%
filter(recruitment_wave %in% c("Wave1", "Wave2")))
, clusters_in = NA)
stargazer(prelim_model_libfair_prelim$lm, prelim_model_libpure_prelim$lm
, prelim_model_confair_prelim$lm, prelim_model_conpure_prelim$lm
, type = stargazer_type, header = F
, se = list(prelim_model_libfair_prelim$se_robust, prelim_model_libpure_prelim$se_robust
, prelim_model_confair_prelim$se_robust, prelim_model_conpure_prelim$se_robust)
, title = "Preliminary Model - By Arm (Waves 1-2 only)"
, column.labels = c("Lib + Fair", "Lib + Pure"
, "Con + Fair", "Con + Pure")
, covariate.labels = c("Base Treatment", "Extension Treatment")
, dep.var.caption  = "Four Study Arms"
, dep.var.labels   = "UBI Ranking"
, notes = "HC Robust Standard Errors"
, report = ('v*c*sp')
, font.size        = "small"
, column.sep.width = "1pt"
, label            = "tab:prelimmodel"
)
model_control_day = custom_lm_calcs(lm_in = lm(ubi_number ~ ideology_bin + recruitment_wave, data = results_clean_lim_ctrl), clusters_in = NA)
model_libfair_day = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level + recruitment_wave, data = results_armlibfair), clusters_in = NA)
model_libpure_day = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level + recruitment_wave, data = results_armlibpure), clusters_in = NA)
model_confair_day = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level + recruitment_wave, data = results_armconfair), clusters_in = NA)
model_conpure_day = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level + recruitment_wave, data = results_armconpure), clusters_in = NA)
stargazer(model_control_day$lm
, model_libfair_day$lm, model_libpure_day$lm
, model_confair_day$lm, model_conpure_day$lm
, type = stargazer_type, header = F
, se = list(model_control_day$se_robust
, model_libfair_day$se_robust, model_libpure_day$se_robust
, model_confair_day$se_robust, model_conpure_day$se_robust
)
, title            = "By Arm, Recruitment Day Covariates"
, column.labels    = c("Control Only"
, "Lib + Fair", "Lib + Pure"
, "Con + Fair", "Con + Pure")
, order = c(1,4,5,2,3,6,7)
, covariate.labels = c("Liberal", "Base Treatment", "Extension Treatment"
,"Wave 2", "Wave 3", "Wave 4", "Wave 5")
, dep.var.caption  = "Four Study Arms + Control"
, dep.var.labels   = "UBI Ranking"
, notes            = "HC Robust Standard Errors"
, report           = ('v*c*sp')
, font.size        = "small"
, column.sep.width = "1pt"
, label            = "tab:wavestratmodel"
)
results_clean_factorial = results_clean_lim %>%
mutate(liberal = case_when(ideology_bin == "Liberal" ~ 1
, TRUE ~ 0)
, conservative = case_when(ideology_bin == "Conservative" ~ 1
, TRUE ~ 0)
, fairness = case_when(arm_story == "Fairness" ~ 1
, TRUE ~ 0)
, purity = case_when(arm_story == "Purity" ~ 1
, TRUE ~ 0)
# base_com - if we consider it it's own treatment
, base_com = case_when(arm_level == "Base" ~ 1
, TRUE ~ 0)
# base_ind - if we consider it indepdent and therefore administered WITH Extension
, base_ind = case_when(arm_level == "Base" ~ 1
, arm_level == "Extension" ~ 1
, TRUE ~ 0)
, extension = case_when(arm_level == "Extension" ~ 1
, TRUE ~ 0)
)
# Arm-specific datasets
results_factorial_lib = results_clean_factorial %>% filter(ideology_bin == 'Liberal')
results_factorial_con = results_clean_factorial %>% filter(ideology_bin == 'Conservative')
results_factorial_fair = results_clean_factorial %>% filter(grepl('Fairness|Control', arm))
results_factorial_pure = results_clean_factorial %>% filter(grepl('Purity|Control', arm))
results_factorial_libfair = results_clean_factorial %>% filter(ideology_bin == 'Liberal' & grepl('Fairness|Control', arm))
results_factorial_libpure = results_clean_factorial %>% filter(ideology_bin == 'Liberal' & grepl('Purity|Control', arm))
results_factorial_confair = results_clean_factorial %>% filter(ideology_bin == 'Conservative' & grepl('Fairness|Control', arm))
results_factorial_conpure = results_clean_factorial %>% filter(ideology_bin == 'Conservative' & grepl('Purity|Control', arm))
cross_tab_factorial = results_clean_factorial %>%
group_by(liberal, conservative, purity, fairness, base_com, base_ind, extension) %>%
summarise(n = n())
# REGRESSION
factorial_levels_com = custom_lm_calcs(lm_in = lm(ubi_number ~ conservative * purity * fairness * extension
, data = results_clean_factorial)
, clusters_in = NA)
stargazer(factorial_levels_com$lm
, se = list(factorial_levels_com$se_robust
)
, type = stargazer_type, header = F
, title            = "All Arms Factorial Specifications"
, column.labels    = c("Levels Independent")
, dep.var.caption  = "All Arms"
, dep.var.labels   = "UBI Ranking"
, notes            = "HC Robust Standard Errors"
# , report           = ('v*c*sp')
, font.size        = "small"
, column.sep.width = "1pt"
, label            = "tab:factorialmodel"
, single.row       = TRUE)
arm_pur_base = custom_lm_calcs(lm_in = lm(arm=="Purity_Base" ~ age + gender + urban, data = results_clean_lim %>%
filter(recruitment_wave %in% c("Wave1"), ideology_bin %in%("Conservative")))#, "Wave2")))
, clusters_in = NA)
arm_pur_ext = custom_lm_calcs(lm_in = lm(arm=="Purity_Extension" ~ age + gender + urban, data = results_clean_lim %>%
filter(recruitment_wave %in% c("Wave1"), ideology_bin %in%("Conservative")))#, "Wave2")))
, clusters_in = NA)
arm_fair_base = custom_lm_calcs(lm_in = lm(arm=="Fairness_Base" ~ age + gender + urban, data = results_clean_lim %>%
filter(recruitment_wave %in% c("Wave1"), ideology_bin %in%("Conservative")))#, "Wave2")))
, clusters_in = NA)
arm_fair_ext = custom_lm_calcs(lm_in = lm(arm=="Fairness_Extension" ~ age + gender + urban, data = results_clean_lim %>%
filter(recruitment_wave %in% c("Wave1"), ideology_bin %in%("Conservative")))#, "Wave2")))
, clusters_in = NA)
arm_control = custom_lm_calcs(lm_in = lm(arm=="Control" ~ age + gender + urban, data = results_clean_lim %>%
filter(recruitment_wave %in% c("Wave1"), ideology_bin %in%("Conservative")))#, "Wave2")))
, clusters_in = NA)
stargazer(arm_pur_base$lm, arm_pur_ext$lm, arm_fair_base$lm, arm_fair_ext$lm, arm_control$lm
, type = stargazer_type, header = F
, se = list(arm_pur_base$se_robust, arm_pur_ext$se_robust, arm_fair_base$se_robust, arm_fair_ext$se_robust, arm_control$se_robust)
, title = "Preliminary Model - Covarience Check by Arm (Waves 1-2 only)"
#, column.labels = c("Purity_Base", "Purity_Extension", "Fairness_Base", "Fairness_Extension", "Control")
#          , covariate.labels = c("Base Treatment", "Extension Treatment")
#, dep.var.caption  = "Four Study Arms"
#, dep.var.labels   = "UBI Ranking"
, notes = "HC Robust Standard Errors"
, report = ('v*c*sp')
, font.size        = "small"
, column.sep.width = "1pt"
# , label            = "tab:prelimmodel"
)
plot_familiarity
# Histogram of familiarity
plot_familiarity = ggplot(data = results_clean_lim %>% filter(!is.na(ubi_familiarity)) %>%
group_by(ubi_familiarity, ideology, ideology_bin) %>%
summarise(Count = n()) %>%
rename("Ideology" = ideology, "UBI Familiarity" = ubi_familiarity)
, aes(x = `UBI Familiarity`, y = Count, fill = Ideology)) +
geom_bar(stat="identity", show.legend = FALSE) +
facet_grid( ~ ideology_bin) +
scale_fill_brewer(type = "div", palette = 5, direction = -1, aesthetics = "fill") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Heat map of number UBI like
plot_ubi = ggplot(data = results_clean_lim %>% filter(!is.na(ubi_familiarity)) %>%
group_by(ubi_familiarity, ideology) %>%
summarise("Average UBI Rank" = mean(ubi_number)) %>%
rename("Ideology" = ideology, "UBI Familiarity" = ubi_familiarity)
, aes(x = `UBI Familiarity`, y = Ideology, fill = `Average UBI Rank`)) +
geom_tile() +
scale_fill_distiller(direction = 1, palette = 2) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)
, legend.position = "right")
plot_familiarity
# grid.arrange(plot_familiarity, plot_ubi
#               , nrow = 2)
results_response = results_clean_lim %>%
select(ideology_bin, arm_level, arm_story
# , "PURE: See myself" = purity_q1_self
# , "PURE: Felt repulsed" = purity_q2_repulsed
# , "PURE: Felt relieved" = purity_q4_relieved
# , "FAIR: See myself" = fairness_q1_self
# , "FAIR: Felt pain" = fairness_q2_pain
# , "FAIR: Felt relieved" = fairness_q4_relieved) %>%
, "See myself" = case_when(arm_story == "Purity" ~ purity_q1_self, TRUE ~ fairness_q1_self)
, "Felt repulsed/pain" = case_when(arm_story == "Purity" ~ purity_q2_repulsed, TRUE ~ fairness_q2_pain)
, "Felt relieved" = case_when(arm_story == "Purity" ~ purity_q4_relieved, TRUE ~ fairness_q4_relieved) %>%
gather(prompt, value, -ideology_bin, -arm_level, -arm_story) %>%
filter(!is.na(value)) %>%
group_by(ideology_bin, arm_level, arm_story, prompt, value) %>%
summarise(count = n()) %>%
mutate(Response = factor(value, levels = response_levels)) %>%
group_by(ideology_bin, arm_level, arm_story, prompt) %>%
mutate(count_total_cohort = sum(count)
, Share = count/count_total_cohort
# , Prompt = factor(prompt, levels = c("PURE: See myself", "PURE: Felt repulsed", "PURE: Felt relieved"
#                                      , "FAIR: See myself", "FAIR: Felt pain", "FAIR: Felt relieved")))
, Prompt = factor(prompt, levels = c("See myself", "Felt repulsed/pain", "Felt relieved")))
ggplot(data = results_response
View(results_response)
results_response = results_clean_lim %>%
results_response = results_clean_lim %>%
results_response = results_clean_lim %>%
select(ideology_bin, arm_level, arm_story
, "See myself" = case_when(arm_story == "Purity" ~ purity_q1_self, TRUE ~ fairness_q1_self)
, "Felt repulsed/pain" = case_when(arm_story == "Purity" ~ purity_q2_repulsed, TRUE ~ fairness_q2_pain)
, "Felt relieved" = case_when(arm_story == "Purity" ~ purity_q4_relieved, TRUE ~ fairness_q4_relieved)) %>%
gather(prompt, value, -ideology_bin, -arm_level, -arm_story) %>%
filter(!is.na(value)) %>%
group_by(ideology_bin, arm_level, arm_story, prompt, value) %>%
summarise(count = n()) %>%
mutate(Response = factor(value, levels = response_levels)) %>%
group_by(ideology_bin, arm_level, arm_story, prompt) %>%
mutate(count_total_cohort = sum(count)
, Share = count/count_total_cohort
, Prompt = factor(prompt, levels = c("See myself", "Felt repulsed/pain", "Felt relieved")))
results_response = results_clean_lim %>%
select(ideology_bin, arm_level, arm_story
, "See myself" = case_when(arm_story == "Purity" ~ purity_q1_self, TRUE ~ fairness_q1_self)
, "Felt repulsed/pain" = case_when(arm_story == "Purity" ~ purity_q2_repulsed, TRUE ~ fairness_q2_pain)
, "Felt relieved" = case_when(arm_story == "Purity" ~ purity_q4_relieved, TRUE ~ fairness_q4_relieved))
View(results_clean_lim)
results_response = results_clean_lim %>%
mutate("See myself" = case_when(arm_story == "Purity" ~ purity_q1_self, TRUE ~ fairness_q1_self)
, "Felt repulsed/pain" = case_when(arm_story == "Purity" ~ purity_q2_repulsed, TRUE ~ fairness_q2_pain)
, "Felt relieved" = case_when(arm_story == "Purity" ~ purity_q4_relieved, TRUE ~ fairness_q4_relieved))
results_response = results_clean_lim %>%
mutate("See myself" = case_when(arm_story == "Purity" ~ purity_q1_self, TRUE ~ fairness_q1_self)
, "Felt repulsed/pain" = case_when(arm_story == "Purity" ~ purity_q2_repulsed, TRUE ~ fairness_q2_pain)
, "Felt relieved" = case_when(arm_story == "Purity" ~ purity_q4_relieved, TRUE ~ fairness_q4_relieved)) %>%
select(ideology_bin, arm_level, arm_story, `See myself`, `Felt repulsed/pain`, `Felt relieved`)
results_response = results_clean_lim %>%
mutate("See myself" = case_when(arm_story == "Purity" ~ purity_q1_self, TRUE ~ fairness_q1_self)
, "Felt repulsed/pain" = case_when(arm_story == "Purity" ~ purity_q2_repulsed, TRUE ~ fairness_q2_pain)
, "Felt relieved" = case_when(arm_story == "Purity" ~ purity_q4_relieved, TRUE ~ fairness_q4_relieved)) %>%
select(ideology_bin, arm_level, arm_story, `See myself`, `Felt repulsed/pain`, `Felt relieved`) %>%
gather(prompt, value, -ideology_bin, -arm_level, -arm_story) %>%
filter(!is.na(value)) %>%
group_by(ideology_bin, arm_level, arm_story, prompt, value) %>%
summarise(count = n()) %>%
mutate(Response = factor(value, levels = response_levels)) %>%
group_by(ideology_bin, arm_level, arm_story, prompt) %>%
mutate(count_total_cohort = sum(count)
, Share = count/count_total_cohort
, Prompt = factor(prompt, levels = c("See myself", "Felt repulsed/pain", "Felt relieved")))
# , "PURE: See myself" = purity_q1_self
# , "PURE: Felt repulsed" = purity_q2_repulsed
# , "PURE: Felt relieved" = purity_q4_relieved
# , "FAIR: See myself" = fairness_q1_self
# , "FAIR: Felt pain" = fairness_q2_pain
# , "FAIR: Felt relieved" = fairness_q4_relieved) %>%
# , Prompt = factor(prompt, levels = c("PURE: See myself", "PURE: Felt repulsed", "PURE: Felt relieved"
#                                      , "FAIR: See myself", "FAIR: Felt pain", "FAIR: Felt relieved")))
ggplot(data = results_response
, aes(x = Prompt, y = Response, fill = Share)) +
geom_tile() +
facet_grid(rows = vars(arm_story, arm_level)
, cols = vars(ideology_bin)) +
scale_fill_distiller(direction = 1, palette = 2) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)
, legend.position = "none")
# PLOT
grid.arrange(plot_ideology, plot_gender
, plot_age, plot_familiarity
, nrow = 2)
# Ideology
plot_ideology = ggplot() +
geom_bar(data = results_clean_lim %>%  group_by(ideology) %>%
summarise(Count = n()) %>% rename("Ideology" = ideology)
, aes(x = Ideology, y = Count, fill = Ideology), stat = "identity") +
scale_fill_brewer(type = "div", palette = 5, direction = -1, aesthetics = "fill") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.position = "left", axis.text.x=element_blank(), legend.text=element_text(size = 8))
# Backbone ggplot object
grpstackbar_plot = ggplot() +
facet_grid( ~ ideology_bin) +
scale_fill_brewer(type = "div", palette = 5, direction = -1, aesthetics = "fill") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Age
plot_age = grpstackbar_plot +
geom_bar(data = results_clean_lim %>% group_by(age, ideology, ideology_bin) %>%
summarise(Count = n()) %>% rename("Ideology" = ideology, "Age" = age)
, aes(x = Age, y = Count, fill = Ideology), stat = "identity", show.legend = FALSE)
# Gender
plot_gender = grpstackbar_plot +
geom_bar(data = results_clean_lim %>% group_by(gender, ideology, ideology_bin) %>%
summarise(Count = n()) %>% rename("Ideology" = ideology, "Gender" = gender)
, aes(x = Gender, y = Count, fill = Ideology), stat = "identity", show.legend = FALSE)
# Urban
plot_urban = grpstackbar_plot +
geom_bar(data = results_clean_lim %>% group_by(urban, ideology, ideology_bin) %>%
summarise(Count = n()) %>% rename("Ideology" = ideology, "Urban" = urban)
, aes(x = Urban, y = Count, fill = Ideology), stat = "identity", show.legend = FALSE)
# Histogram of familiarity
plot_familiarity = grpstackbar_plot +
geom_bar(data = results_clean_lim %>% filter(!is.na(ubi_familiarity)) %>%
group_by(ubi_familiarity, ideology, ideology_bin) %>%
summarise(Count = n()) %>%
rename("Ideology" = ideology, "UBI Familiarity" = ubi_familiarity)
, aes(x = `UBI Familiarity`, y = Count, fill = Ideology), stat="identity", show.legend = FALSE)
# PLOT
grid.arrange(plot_ideology, plot_gender
, plot_age, plot_familiarity
, nrow = 2)
stargazer_type = "text" #"latex" # change to latex when ready to knit
model_libfair = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibfair), clusters_in = NA)
model_libpure = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibpure), clusters_in = NA)
model_confair = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconfair), clusters_in = NA)
model_conpure = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconpure), clusters_in = NA)
stargazer(model_libfair$lm, model_libpure$lm
, model_confair$lm, model_conpure$lm
, se = list(model_libfair$se_robust, model_libpure$se_robust
, model_confair$se_robust, model_conpure$se_robust)
, type = stargazer_type, header = F
, title = "By Arm"
, column.labels = c("Lib + Fair", "Lib + Pure"
, "Con + Fair", "Con + Pure")
, covariate.labels = c("Base Only Treatment", "Base + Extension Treatment")
, dep.var.caption  = "Four Study Arms"
, dep.var.labels   = "UBI Ranking"
, notes = "HC Robust Standard Errors"
, report = ('v*c*sp')
, font.size        = "small"
, column.sep.width = "1pt"
, label            = "tab:allarmsmodel"
)
stargazer(model_libfair$lm, model_libpure$lm
, model_confair$lm, model_conpure$lm
, se = list(model_libfair$se_robust, model_libpure$se_robust
, model_confair$se_robust, model_conpure$se_robust)
, type = stargazer_type, header = F
, title = "By Arm"
, column.labels = c("Lib <br> Fair", "Lib + Pure"
, "Con + Fair", "Con + Pure")
, covariate.labels = c("Base Only Treatment", "Base + Extension Treatment")
, dep.var.caption  = "Four Study Arms"
, dep.var.labels   = "UBI Ranking"
, notes = "HC Robust Standard Errors"
, report = ('v*c*sp')
, font.size        = "small"
, column.sep.width = "1pt"
, label            = "tab:allarmsmodel"
)
model_libfair = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibfair), clusters_in = NA)
model_libpure = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibpure), clusters_in = NA)
model_confair = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconfair), clusters_in = NA)
model_conpure = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconpure), clusters_in = NA)
stargazer(model_libfair$lm, model_libpure$lm
, model_confair$lm, model_conpure$lm
, se = list(model_libfair$se_robust, model_libpure$se_robust
, model_confair$se_robust, model_conpure$se_robust)
, type = stargazer_type, header = F
, title = "By Arm"
, column.labels = c("Lib + Fair", "Lib + Pure"
, "Con + Fair", "Con + Pure")
, covariate.labels = c("Base Only Treatment", "Base + Extension Treatment")
, dep.var.caption  = "Four Study Arms"
, dep.var.labels   = "UBI Ranking"
, notes = "HC Robust Standard Errors"
, report = ('v*c*sp')
, font.size        = "small"
, column.sep.width = "1pt"
, single.row        = TRUE
, label            = "tab:allarmsmodel"
)
# Gender
model_conpure_gender = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level + gender
, data = results_armconpure)
, clusters_in = NA)
# Familiarity
model_conpure_familiarity = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level + ubi_familiarity_bin
, data = results_armconpure)
, clusters_in = NA)
# Reaction (need to re-factor reactions first)
results_armconpure_reaction = results_armconpure %>%
mutate(purity_q2_repulsed_bin_f = case_when(is.na(purity_q2_repulsed_bin) ~ 0
, TRUE ~ as.numeric(as.character(purity_q2_repulsed_bin))) %>% factor()
, purity_q4_relieved_bin_f = case_when(is.na(purity_q4_relieved_bin) ~ 0
, TRUE ~ as.numeric(as.character(purity_q4_relieved_bin))) %>% factor()
)
model_conpure_reaction = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level + purity_q2_repulsed_bin_f * purity_q4_relieved_bin_f
, data = results_armconpure_reaction)
, clusters_in = NA)
stargazer(model_conpure$lm
, model_conpure_gender$lm
, model_conpure_familiarity$lm
, model_conpure_reaction$lm
, type = stargazer_type, header = F
, se = list(model_conpure$se_robust
, model_conpure_gender$se_robust
, model_conpure_familiarity$se_robust
, model_conpure_reaction$se_robust
)
, title = "Conservative + Purity Treatment Arm Interaction Specifications"
, column.labels = c("No Covariates", "Gender", "UBI Familiarity", "Reaction")
, covariate.labels = c("Base Only Treatment", "Base + Extension Treatment"
, "Male", "Familiar w/ UBI"
, "Repulsed", "Relieved", "Repulsed then Relieved")
, dep.var.caption  = "Con + Pure Arm Only"
, dep.var.labels   = "UBI Ranking"
, notes            = "HC Robust Standard Errors"
, report           = ('v*c*sp')
, font.size        = "small"
, column.sep.width = "1pt"
, single.row       = TRUE
, label            = "tab:model3"
)
# model_libfair_react = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibfair), clusters_in = NA)
# model_libpure_react = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibpure), clusters_in = NA)
# model_confair_react = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconfair), clusters_in = NA)
model_pureext_react = custom_lm_calcs(lm_in = lm(purity_q4_relieved_bin ~ ideology_bin
, data = results_factorial_pure %>% filter(arm_level == "Extension")), clusters_in = NA)
results_factorial_pure %>% filter(arm_level == "Extension") %>%
group_by(purity_q4_relieved_bin ~ ideology_bin) %>% summarise(n = n())
results_factorial_pure %>% filter(arm_level == "Extension") %>%
group_by(ideology_bin, purity_q4_relieved_bin) %>% summarise(n = n())
# model_libfair_react = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibfair), clusters_in = NA)
# model_libpure_react = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibpure), clusters_in = NA)
# model_confair_react = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconfair), clusters_in = NA)
model_pureext_react = custom_lm_calcs(lm_in = lm(purity_q4_relieved_bin ~ ideology_bin
, data = results_factorial_pure %>% filter(arm_level == "Extension")), clusters_in = NA)
