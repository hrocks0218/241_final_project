, grepl('a', fc_e_3, ignore.case = TRUE) ~ fc_e_3
, TRUE ~ NA_character_)
, fairness_q4_relieved = case_when(grepl('a', fc_e_4, ignore.case = TRUE) ~ fc_e_4
, TRUE ~ NA_character_)
# Bin reaction vars
, purity_q2_repulsed_bin = case_when(is.na(purity_q2_repulsed) ~ NA_real_
, purity_q2_repulsed %in% c("None at all", "A little") ~ 0
, purity_q2_repulsed %in% c("A moderate amount", "A great deal", "A lot") ~ 1
, TRUE ~ NA_real_) %>% factor()
, purity_q4_relieved_bin = case_when(is.na(purity_q4_relieved) ~ NA_real_
, purity_q4_relieved %in% c("None at all", "A little") ~ 0
, purity_q4_relieved %in% c("A moderate amount", "A great deal", "A lot") ~ 1
, TRUE ~ NA_real_) %>% factor()
, fairness_q2_pain_bin = case_when(is.na(fairness_q2_pain) ~ NA_real_
, fairness_q2_pain %in% c("None at all", "A little") ~ 0
, fairness_q2_pain %in% c("A moderate amount", "A great deal", "A lot") ~ 1
, TRUE ~ NA_real_) %>% factor()
, fairness_q4_relieved_bin = case_when(is.na(fairness_q4_relieved) ~ NA_real_
, fairness_q4_relieved %in% c("None at all", "A little") ~ 0
, fairness_q4_relieved %in% c("A moderate amount", "A great deal", "A lot") ~ 1
, TRUE ~ NA_real_) %>% factor()
, open_text_reaction = q3_fc2
# Factor variables
, ideology = factor(polispect, levels = ideology_levels)
, ideology_bin = case_when(is.na(ideology) ~ "missing"
, ideology == "Very Liberal" ~ "liberal"
, ideology == "Lean Liberal" ~ "liberal"
, ideology == "Liberal" ~ "liberal"
, ideology == "Very Conservative" ~ "conservative"
, ideology == "Lean Conservative" ~ "conservative"
, ideology == "Conservative" ~ "conservative"
, TRUE ~ "moderate")
# UBI/Outcome
, ubi_group = factor(ubi_2_nps_group, levels = ubi_group_levels)
, ubi_familiarity = factor(ubi_f, levels = ubi_familiarity_levels)
, ubi_familiarity_bin = case_when(is.na(ubi_f) ~ NA_real_
, ubi_f == "Not familiar at all" ~ 0
, TRUE ~ 1) %>% factor()
, ubi_number = as.numeric(ubi_2)
, recruitment_day = case_when(is.na(recruitday) ~ "missing"
, recruitday == "T1" ~ "Tuesday1"
, recruitday == "SU" ~ "Sunday"
, recruitday == "M" ~ "Monday"
, recruitday == "T2" ~ "Tuesday2"
, TRUE ~ "unknown") %>% factor(levels = recruit_day_levels)
)
# Clean = limit to the variables we need
results_clean = results_full %>%
select(prolific_pid, panel, arm, node, arm_level
, ideology, ideology_bin, age, gender, urban, employment_status, student_status
, purity_q1_self, purity_q2_repulsed, purity_q3_injustice, purity_q4_relieved
, fairness_q1_self, fairness_q2_pain, fairness_q3_injustice, fairness_q4_relieved
, purity_q2_repulsed_bin, purity_q4_relieved_bin, fairness_q2_pain_bin, fairness_q4_relieved_bin
, open_text_reaction
, ubi_number, ubi_group, ubi_familiarity, ubi_familiarity_bin, recruitment_day, recruitday)
# Arm-specific datasets
results_armlibfair = results_clean %>% filter(ideology_bin == 'liberal' & grepl('fairness|control', arm))
results_armlibpure = results_clean %>% filter(ideology_bin == 'liberal' & grepl('purity|control', arm))
results_armconfair = results_clean %>% filter(ideology_bin == 'conservative' & grepl('fairness|control', arm))
results_armconpur = results_clean %>% filter(ideology_bin == 'conservative' & grepl('purity|control', arm))
# Remove moderates for EDA
results_clean_lim = results_clean %>% filter(ideology_bin != "moderate")
# Adjust all variable names to remove '-' and '.' + lowercase
names(results_full_dedup) = tolower(gsub(x = names(results_full_dedup), pattern = "\\-|\\.", replacement = "_"))
# Discrete variables as factors (manual ordering for plotting)
ideology_levels = c("Very Liberal", "Lean Liberal", "Liberal", "Moderate", "Conservative", "Lean Conservative", "Very Conservative")
response_levels = c("None at all", "A little", "A moderate amount", "A lot", "A great deal")
# c("A great deal", "A lot", "A moderate amount", "A little", "None at all")
ubi_group_levels = c("Promoter", "Passive", "Detractor")
ubi_familiarity_levels = c("Extremely familiar", "Very familiar", "Moderately familiar", "Slightly familiar", "Not familiar at all")
recruit_day_levels = c("Tuesday1", "Sunday", "Monday", "Tuesday2", "Friday")
results_full = results_full_dedup  %>%
# Define arms and nodes
mutate(arm = case_when(grepl('a', fc_b_1, ignore.case = TRUE) ~ "purity_base"
, grepl('a', fc_c_1, ignore.case = TRUE) ~ "purity_extension"
, grepl('a', fc_d_1, ignore.case = TRUE) ~ "fairness_base"
, grepl('a', fc_e_1, ignore.case = TRUE) ~ "fairness_extension"
, TRUE ~ "control") %>% factor(levels = c("control", "purity_base", "purity_extension", "fairness_base", "fairness_extension"))
, node = paste0(arm, "_panel_", panel)
, arm_level = case_when(grepl('base', arm) ~ 'base'
, grepl('extension', arm) ~ 'extension'
, TRUE ~ 'control') %>% factor(levels = c("control", "base", "extension"))
# Combine reaction vars from different arms
, purity_q1_self = case_when(grepl('a', fc_b_1, ignore.case = TRUE) ~ fc_b_1
, grepl('a', fc_c_1, ignore.case = TRUE) ~ fc_c_1
, TRUE ~ NA_character_)
, purity_q2_repulsed = case_when(grepl('a', fc_b_2, ignore.case = TRUE) ~ fc_b_2
, grepl('a', fc_c_2, ignore.case = TRUE) ~ fc_c_2
, TRUE ~ NA_character_)
, purity_q3_injustice = case_when(grepl('a', fc_b_3, ignore.case = TRUE) ~ fc_b_3
, grepl('a', fc_c_3, ignore.case = TRUE) ~ fc_c_3
, TRUE ~ NA_character_)
, purity_q4_relieved = case_when(grepl('a', fc_c_4, ignore.case = TRUE) ~ fc_c_4
, TRUE ~ NA_character_)
, fairness_q1_self = case_when(grepl('a', fc_d_1, ignore.case = TRUE) ~ fc_d_1
, grepl('a', fc_e_1, ignore.case = TRUE) ~ fc_e_1
, TRUE ~ NA_character_)
, fairness_q2_pain = case_when(grepl('a', fc_d_2, ignore.case = TRUE) ~ fc_d_2
, grepl('a', fc_e_2, ignore.case = TRUE) ~ fc_e_2
, TRUE ~ NA_character_)
, fairness_q3_injustice = case_when(grepl('a', fc_d_3, ignore.case = TRUE) ~ fc_d_3
, grepl('a', fc_e_3, ignore.case = TRUE) ~ fc_e_3
, TRUE ~ NA_character_)
, fairness_q4_relieved = case_when(grepl('a', fc_e_4, ignore.case = TRUE) ~ fc_e_4
, TRUE ~ NA_character_)
# Bin reaction vars
, purity_q2_repulsed_bin = case_when(is.na(purity_q2_repulsed) ~ NA_real_
, purity_q2_repulsed %in% c("None at all", "A little") ~ 0
, purity_q2_repulsed %in% c("A moderate amount", "A great deal", "A lot") ~ 1
, TRUE ~ NA_real_) %>% factor()
, purity_q4_relieved_bin = case_when(is.na(purity_q4_relieved) ~ NA_real_
, purity_q4_relieved %in% c("None at all", "A little") ~ 0
, purity_q4_relieved %in% c("A moderate amount", "A great deal", "A lot") ~ 1
, TRUE ~ NA_real_) %>% factor()
, fairness_q2_pain_bin = case_when(is.na(fairness_q2_pain) ~ NA_real_
, fairness_q2_pain %in% c("None at all", "A little") ~ 0
, fairness_q2_pain %in% c("A moderate amount", "A great deal", "A lot") ~ 1
, TRUE ~ NA_real_) %>% factor()
, fairness_q4_relieved_bin = case_when(is.na(fairness_q4_relieved) ~ NA_real_
, fairness_q4_relieved %in% c("None at all", "A little") ~ 0
, fairness_q4_relieved %in% c("A moderate amount", "A great deal", "A lot") ~ 1
, TRUE ~ NA_real_) %>% factor()
, open_text_reaction = q3_fc2
# Factor variables
, ideology = factor(polispect, levels = ideology_levels)
, ideology_bin = case_when(is.na(ideology) ~ "missing"
, ideology == "Very Liberal" ~ "liberal"
, ideology == "Lean Liberal" ~ "liberal"
, ideology == "Liberal" ~ "liberal"
, ideology == "Very Conservative" ~ "conservative"
, ideology == "Lean Conservative" ~ "conservative"
, ideology == "Conservative" ~ "conservative"
, TRUE ~ "moderate")
# UBI/Outcome
, ubi_group = factor(ubi_2_nps_group, levels = ubi_group_levels)
, ubi_familiarity = factor(ubi_f, levels = ubi_familiarity_levels)
, ubi_familiarity_bin = case_when(is.na(ubi_f) ~ NA_real_
, ubi_f == "Not familiar at all" ~ 0
, TRUE ~ 1) %>% factor()
, ubi_number = as.numeric(ubi_2)
, recruitment_day = case_when(is.na(recruitday) ~ "missing"
, recruitday == "T1" ~ "Tuesday1"
, recruitday == "SU" ~ "Sunday"
, recruitday == "M" ~ "Monday"
, recruitday == "T2" ~ "Tuesday2"
, recruitday == "F" ~ "Friday"
, TRUE ~ "unknown") %>% factor(levels = recruit_day_levels)
)
# Clean = limit to the variables we need
results_clean = results_full %>%
select(prolific_pid, panel, arm, node, arm_level
, ideology, ideology_bin, age, gender, urban, employment_status, student_status
, purity_q1_self, purity_q2_repulsed, purity_q3_injustice, purity_q4_relieved
, fairness_q1_self, fairness_q2_pain, fairness_q3_injustice, fairness_q4_relieved
, purity_q2_repulsed_bin, purity_q4_relieved_bin, fairness_q2_pain_bin, fairness_q4_relieved_bin
, open_text_reaction
, ubi_number, ubi_group, ubi_familiarity, ubi_familiarity_bin, recruitment_day, recruitday)
# Arm-specific datasets
results_armlibfair = results_clean %>% filter(ideology_bin == 'liberal' & grepl('fairness|control', arm))
results_armlibpure = results_clean %>% filter(ideology_bin == 'liberal' & grepl('purity|control', arm))
results_armconfair = results_clean %>% filter(ideology_bin == 'conservative' & grepl('fairness|control', arm))
results_armconpur = results_clean %>% filter(ideology_bin == 'conservative' & grepl('purity|control', arm))
# Remove moderates for EDA
results_clean_lim = results_clean %>% filter(ideology_bin != "moderate")
balance_arm_recuit = results_clean %>% group_by(recruitment_day, ideology_bin, arm) %>%
summarise(observations = n()) %>%
pivot_wider(names_from = recruitment_day, values_from = observations) %>%
arrange(ideology_bin, arm)
balance_arm_recuit
rm(list=ls())
packages = c('openxlsx'
, 'tidyverse', 'data.table'
, 'visNetwork'
, 'lmtest', 'sandwich', 'car', 'survey'
, 'gridExtra', 'stargazer', 'cowplot', 'corrplot'
, 'knitr')
packages_needed = packages[!packages %in% installed.packages()]
install.packages(packages_needed)
lapply(packages, library, character.only = TRUE)
# install.packages("webshot")
# webshot::install_phantomjs()
stargazer_type = "text" #"latex" # change to latex when ready to knit
# Survey Results
# Panel 1
results_raw_panel1 = read.csv("./data/study/MF Framing Pilot - Full Recruitment - Panel 1.csv", stringsAsFactors = FALSE) %>%
filter(!grepl("Start|Import", StartDate)) %>%
mutate(panel = 1)
# Panel 2
results_raw_panel2 = read.csv("./data/study/MF Framing Pilot - Full Recruitment - Panel 2.csv", stringsAsFactors = FALSE) %>%
filter(!grepl("Start|Import", StartDate)) %>%
mutate(panel = 2)
# Panel 2 - 10 Control Females
results_raw_panel2_10fem = read.csv("./data/study/MF Framing Pilot - Full Recruitment - Panel 2 - 10 Female Control.csv", stringsAsFactors = FALSE) %>%
filter(!grepl("Start|Import", StartDate)) %>%
mutate(panel = 2)
# Participant Details
# Panel 1
participant_detail_panel1 = read.csv("./data/study/Prolific Participants - Panel 1.csv", stringsAsFactors = FALSE)
# Panel 2
participant_detail_panel2 = read.csv("./data/study/Prolific Participants - Panel 2.csv", stringsAsFactors = FALSE)
# Panel 2 - 10 Control Females
participant_detail_panel2_10fem = read.csv("./data/study/Prolific Participants - Panel 2 - 10 Female Control.csv", stringsAsFactors = FALSE)
# Stack panel data (500 obs x 63 vars)
results_stacked = bind_rows(results_raw_panel1
, results_raw_panel2
, results_raw_panel2_10fem
) %>%
# Duplicate responses are a product of our multiple data extracts, remove as-is 500 obs x 63 vars)
distinct(ResponseId, .keep_all= TRUE)
# Identify if the same person filled out the survey >1x
results_ids_dedup = results_stacked %>%
select(PROLIFIC_PID, ResponseId, StartDate) %>%
group_by(PROLIFIC_PID) %>%
summarize(count = n()
, min_date = min(StartDate))
# Keep only their first submission (500 obs x 64 vars [count will tell us who filled out 2x])
results_dedup = results_stacked %>%
merge(results_ids_dedup
, by.x = c("PROLIFIC_PID", "StartDate")
, by.y = c("PROLIFIC_PID", "min_date")
, all.x = TRUE) %>%
filter(!is.na(count))
# Stack participant details (508 obs x 21 vars)
participaipant_detail_stacked =  bind_rows(participant_detail_panel1
, participant_detail_panel2
, participant_detail_panel2_10fem) %>%
# Duplicate responses are a product of our multiple data extracts, remove as-is (508 obs x 21 vars)
distinct(session_id, .keep_all= TRUE) %>%
# Remove vars that will be in results as well (518 obs x 19 vars)
select(-status, -age)
# Identify if the same person filled out the survey >1x
participaipant_ids_dedup = participaipant_detail_stacked %>%
select(participant_id, session_id, started_datetime) %>%
group_by(participant_id) %>%
summarize(count = n()
, min_date = min(started_datetime))
# Keep only their first submission (508 obs x 18 vars [count will tell us who filled out 2x])
participaipant_detail_dedup = participaipant_detail_stacked %>%
merge(participaipant_ids_dedup
, by.x = c("participant_id", "started_datetime")
, by.y = c("participant_id", "min_date")
, all.x = TRUE) %>%
filter(!is.na(count)) %>% select(-count, -session_id)
# Merge for final dataset (500 obs x 81 vars)
results_full_dedup = merge(results_dedup
, participaipant_detail_dedup
, by.x = "PROLIFIC_PID"
, by.y = "participant_id"
, all.x = TRUE)
# Adjust all variable names to remove '-' and '.' + lowercase
names(results_full_dedup) = tolower(gsub(x = names(results_full_dedup), pattern = "\\-|\\.", replacement = "_"))
# Discrete variables as factors (manual ordering for plotting)
ideology_levels = c("Very Liberal", "Lean Liberal", "Liberal", "Moderate", "Conservative", "Lean Conservative", "Very Conservative")
response_levels = c("None at all", "A little", "A moderate amount", "A lot", "A great deal")
ubi_group_levels = c("Promoter", "Passive", "Detractor")
ubi_familiarity_levels = c("Extremely familiar", "Very familiar", "Moderately familiar", "Slightly familiar", "Not familiar at all")
recruit_day_levels = c("Tuesday1", "Sunday", "Monday", "Tuesday2", "Friday")
results_full = results_full_dedup  %>%
# Define arms and nodes
mutate(arm = case_when(grepl('a', fc_b_1, ignore.case = TRUE) ~ "purity_base"
, grepl('a', fc_c_1, ignore.case = TRUE) ~ "purity_extension"
, grepl('a', fc_d_1, ignore.case = TRUE) ~ "fairness_base"
, grepl('a', fc_e_1, ignore.case = TRUE) ~ "fairness_extension"
, TRUE ~ "control") %>% factor(levels = c("control", "purity_base", "purity_extension", "fairness_base", "fairness_extension"))
, node = paste0(arm, "_panel_", panel)
, arm_level = case_when(grepl('base', arm) ~ 'base'
, grepl('extension', arm) ~ 'extension'
, TRUE ~ 'control') %>% factor(levels = c("control", "base", "extension"))
# Combine reaction vars from different arms
, purity_q1_self = case_when(grepl('a', fc_b_1, ignore.case = TRUE) ~ fc_b_1
, grepl('a', fc_c_1, ignore.case = TRUE) ~ fc_c_1
, TRUE ~ NA_character_)
, purity_q2_repulsed = case_when(grepl('a', fc_b_2, ignore.case = TRUE) ~ fc_b_2
, grepl('a', fc_c_2, ignore.case = TRUE) ~ fc_c_2
, TRUE ~ NA_character_)
, purity_q3_injustice = case_when(grepl('a', fc_b_3, ignore.case = TRUE) ~ fc_b_3
, grepl('a', fc_c_3, ignore.case = TRUE) ~ fc_c_3
, TRUE ~ NA_character_)
, purity_q4_relieved = case_when(grepl('a', fc_c_4, ignore.case = TRUE) ~ fc_c_4
, TRUE ~ NA_character_)
, fairness_q1_self = case_when(grepl('a', fc_d_1, ignore.case = TRUE) ~ fc_d_1
, grepl('a', fc_e_1, ignore.case = TRUE) ~ fc_e_1
, TRUE ~ NA_character_)
, fairness_q2_pain = case_when(grepl('a', fc_d_2, ignore.case = TRUE) ~ fc_d_2
, grepl('a', fc_e_2, ignore.case = TRUE) ~ fc_e_2
, TRUE ~ NA_character_)
, fairness_q3_injustice = case_when(grepl('a', fc_d_3, ignore.case = TRUE) ~ fc_d_3
, grepl('a', fc_e_3, ignore.case = TRUE) ~ fc_e_3
, TRUE ~ NA_character_)
, fairness_q4_relieved = case_when(grepl('a', fc_e_4, ignore.case = TRUE) ~ fc_e_4
, TRUE ~ NA_character_)
# Bin reaction vars
, purity_q2_repulsed_bin = case_when(is.na(purity_q2_repulsed) ~ NA_real_
, purity_q2_repulsed %in% c("None at all", "A little") ~ 0
, purity_q2_repulsed %in% c("A moderate amount", "A great deal", "A lot") ~ 1
, TRUE ~ NA_real_) %>% factor()
, purity_q4_relieved_bin = case_when(is.na(purity_q4_relieved) ~ NA_real_
, purity_q4_relieved %in% c("None at all", "A little") ~ 0
, purity_q4_relieved %in% c("A moderate amount", "A great deal", "A lot") ~ 1
, TRUE ~ NA_real_) %>% factor()
, fairness_q2_pain_bin = case_when(is.na(fairness_q2_pain) ~ NA_real_
, fairness_q2_pain %in% c("None at all", "A little") ~ 0
, fairness_q2_pain %in% c("A moderate amount", "A great deal", "A lot") ~ 1
, TRUE ~ NA_real_) %>% factor()
, fairness_q4_relieved_bin = case_when(is.na(fairness_q4_relieved) ~ NA_real_
, fairness_q4_relieved %in% c("None at all", "A little") ~ 0
, fairness_q4_relieved %in% c("A moderate amount", "A great deal", "A lot") ~ 1
, TRUE ~ NA_real_) %>% factor()
, open_text_reaction = q3_fc2
# Factor variables
, ideology = factor(polispect, levels = ideology_levels)
, ideology_bin = case_when(is.na(ideology) ~ "missing"
, ideology == "Very Liberal" ~ "liberal"
, ideology == "Lean Liberal" ~ "liberal"
, ideology == "Liberal" ~ "liberal"
, ideology == "Very Conservative" ~ "conservative"
, ideology == "Lean Conservative" ~ "conservative"
, ideology == "Conservative" ~ "conservative"
, TRUE ~ "moderate")
# UBI/Outcome
, ubi_group = factor(ubi_2_nps_group, levels = ubi_group_levels)
, ubi_familiarity = factor(ubi_f, levels = ubi_familiarity_levels)
, ubi_familiarity_bin = case_when(is.na(ubi_f) ~ NA_real_
, ubi_f == "Not familiar at all" ~ 0
, TRUE ~ 1) %>% factor()
, ubi_number = as.numeric(ubi_2)
, recruitment_day = case_when(is.na(recruitday) ~ "missing"
, recruitday == "T1" ~ "Tuesday1"
, recruitday == "SU" ~ "Sunday"
, recruitday == "M" ~ "Monday"
, recruitday == "T2" ~ "Tuesday2"
, recruitday == "F" ~ "Friday"
, TRUE ~ "unknown") %>% factor(levels = recruit_day_levels)
)
# Clean = limit to the variables we need
results_clean = results_full %>%
select(prolific_pid, panel, arm, node, arm_level
, ideology, ideology_bin, age, gender, urban, employment_status, student_status
, purity_q1_self, purity_q2_repulsed, purity_q3_injustice, purity_q4_relieved
, fairness_q1_self, fairness_q2_pain, fairness_q3_injustice, fairness_q4_relieved
, purity_q2_repulsed_bin, purity_q4_relieved_bin, fairness_q2_pain_bin, fairness_q4_relieved_bin
, open_text_reaction
, ubi_number, ubi_group, ubi_familiarity, ubi_familiarity_bin, recruitment_day, recruitday)
# Arm-specific datasets
results_armlibfair = results_clean %>% filter(ideology_bin == 'liberal' & grepl('fairness|control', arm))
results_armlibpure = results_clean %>% filter(ideology_bin == 'liberal' & grepl('purity|control', arm))
results_armconfair = results_clean %>% filter(ideology_bin == 'conservative' & grepl('fairness|control', arm))
results_armconpur = results_clean %>% filter(ideology_bin == 'conservative' & grepl('purity|control', arm))
# Remove moderates for EDA
results_clean_lim = results_clean %>% filter(ideology_bin != "moderate")
balance_arm_recuit = results_clean %>% group_by(recruitment_day, ideology_bin, arm) %>%
summarise(observations = n()) %>%
pivot_wider(names_from = recruitment_day, values_from = observations) %>%
arrange(ideology_bin, arm)
balance_arm_recuit
model1_libfair_day = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level + recruitment_day, data = results_armlibfair), clusters_in = NA)
my_lm_calcs = function(lm_in, clusters_in){
# Robust
vcov_robust = vcovHC(lm_in)
se_robust = sqrt(diag(vcov_robust))
# Cluster
if(length(clusters_in) > 1){
vcov_cluster = cluster.vcov(lm_in, clusters_in)
se_cluster = sqrt(diag(vcov_cluster))
} else {
vcov_cluster = NA
se_cluster = NA
}
# Output
lm_out = list(lm = lm_in
, vcov_robust = vcov_robust
, se_robust = se_robust
, vcov_cluster = vcov_cluster
, se_cluster = se_cluster
)
return(lm_out)
}
model1_libfair_day = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level + recruitment_day, data = results_armlibfair), clusters_in = NA)
model1_libpure_day = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level + recruitment_day, data = results_armlibpure), clusters_in = NA)
model1_confair_day = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level + recruitment_day, data = results_armconfair), clusters_in = NA)
model1_conpure_day = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level + recruitment_day, data = results_armconpur), clusters_in = NA)
stargazer(model1_libfair_day$lm, model1_libpure_day$lm
, model1_confair_day$lm, model1_conpure_day$lm
, type = stargazer_type, header = F
, se = list(model1_libfair_day$se_robust, model1_libpure_day$se_robust
, model1_confair_day$se_robust, model1_conpure_day$se_robust)
, title            = "Moral Foundations Regression Specifications"
, column.labels    = c("Lib + Fair", "Lib + Pure"
, "Con + Fair", "Con + Pure")
, covariate.labels = c("Base", "Extension"
, "Sunday", "Monday", "Tuesday2")
, dep.var.caption  = "Four Study Arms"
, dep.var.labels   = "UBI Ranking"
, notes            = "HC Robust Standard Errors"
, report           = ('v*c*sp')
)
# model3_libfair = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibfair_balance), clusters_in = NA)
# model3_libpure = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibpure_balance), clusters_in = NA)
# model3_confair = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconfair_balance), clusters_in = NA)
# model3_conpure = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconpur_balance), clusters_in = NA)
model3_libfair = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibfair), clusters_in = NA)
model3_libpure = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibpure), clusters_in = NA)
model3_confair = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconfair), clusters_in = NA)
model3_conpure = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconpur), clusters_in = NA)
stargazer(model3_libfair$lm, model3_libpure$lm
, model3_confair$lm, model3_conpure$lm
, type = stargazer_type, header = F
, se = list(model3_libfair$se_robust, model3_libpure$se_robust
, model3_confair$se_robust, model3_conpure$se_robust)
, title = "Moral Foundations Regression Specifications"
, column.labels = c("Lib + Fair", "Lib + Pure"
, "Con + Fair", "Con + Pure")
, covariate.labels = c("Base", "Extension")
, notes = "HC Robust Standard Errors"
, report = ('v*c*sp')
)
# Using the survey design package and stratifying by recruitment day
results_armconpur_balance_strat = svydesign(id=~1, strata=~recruitday, data = results_armconpur_balance)
# Remove observations that don't give us apples to apples comparisons (e.g. data in the control group from different periods)
# Conservative + Purity = ALL
results_armconpur_balance = results_armconpur
# Conservative + Fairness = Tuesday1
results_armconfair_balance = results_armconfair[results_armconfair$recruitment_day=='Tuesday1',]
# Liberal + Purity = Tuesday1 + Tuesday2
results_armlibpure_balance = results_armlibpure[results_armlibpure$recruitment_day %in% c('Tuesday1', 'Tuesday2'),]
# Liberal + Fairness = Tuesday1 + Tuesday2
results_armlibfair_balance = results_armlibfair[results_armlibfair$recruitment_day %in% c('Tuesday1', 'Tuesday2'),]
# Using the survey design package and stratifying by recruitment day
results_armconpur_strat = svydesign(id=~1, strata=~recruitday, data = results_armconpur)
model2_sratday = svyglm(ubi_number ~ arm_level, design = results_armconpur_strat)
stargazer(model2_sratday
, type = stargazer_type, header = F
# , se = list() ???
, title = "Moral Foundations Regression Specifications"
, column.labels = c("Con + Pure")
, covariate.labels = c("Base", "Extension")
, notes = "HC Robust Standard Errors"
, report = ('v*c*sp')
)
# model3_libfair = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibfair_balance), clusters_in = NA)
# model3_libpure = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibpure_balance), clusters_in = NA)
# model3_confair = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconfair_balance), clusters_in = NA)
# model3_conpure = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconpur_balance), clusters_in = NA)
model3_libfair = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibfair), clusters_in = NA)
model3_libpure = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibpure), clusters_in = NA)
model3_confair = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconfair), clusters_in = NA)
model3_conpure = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconpur), clusters_in = NA)
stargazer(model3_libfair$lm, model3_libpure$lm
, model3_confair$lm, model3_conpure$lm
, type = stargazer_type, header = F
, se = list(model3_libfair$se_robust, model3_libpure$se_robust
, model3_confair$se_robust, model3_conpure$se_robust)
, title = "Moral Foundations Regression Specifications"
, column.labels = c("Lib + Fair", "Lib + Pure"
, "Con + Fair", "Con + Pure")
, covariate.labels = c("Base", "Extension")
, notes = "HC Robust Standard Errors"
, report = ('v*c*sp')
)
# Gender
model4_conpure_gender = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level + gender, data = results_armconpur), clusters_in = NA)
# Familiarity
model5_conpure_familiarity = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level + ubi_familiarity_bin, data = results_armconpur), clusters_in = NA)
# Reaction
model6_conpure_reaction_bas = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level + purity_q2_repulsed_bin, data = results_armconpur), clusters_in = NA)
model7_conpure_reaction_ext = my_lm_calcs(lm_in = lm(ubi_number ~ purity_q4_relieved_bin
, data = results_armconpur %>% filter(arm_level != "base")), clusters_in = NA)
stargazer(model4_conpure_gender$lm
, model5_conpure_familiarity$lm
, model6_conpure_reaction_bas$lm
, model7_conpure_reaction_ext$lm
, type = stargazer_type, header = F
, se = list(model4_conpure_gender$se_robust
, model5_conpure_familiarity$se_robust
, model6_conpure_reaction_bas$se_robust
, model7_conpure_reaction_ext$se_robust
)
, title = "Moral Foundations Prelim Regression Specifications"
, column.labels = c("Gender", "Familiarity", "Reaction - Base", "Reaction - Extension")
, covariate.labels = c("Base", "Extension"
, "Male", "Familiar w/ UBI"
, "Repulsed", "Relieved")
, dep.var.caption  = "Con + Pure Arm"
, dep.var.labels   = "UBI Ranking"
, notes = "HC Robust Standard Errors"
, report = ('v*c*sp')
)
stargazer(model3_conpure$lm
, model4_conpure_gender$lm
, model5_conpure_familiarity$lm
, model6_conpure_reaction_bas$lm
, model7_conpure_reaction_ext$lm
, type = stargazer_type, header = F
, se = list(model3_conpure$se_robust
, model4_conpure_gender$se_robust
, model5_conpure_familiarity$se_robust
, model6_conpure_reaction_bas$se_robust
, model7_conpure_reaction_ext$se_robust
)
, title = "Moral Foundations Prelim Regression Specifications"
, column.labels = c("Base", "Gender", "Familiarity", "Reaction - Base", "Reaction - Extension")
, covariate.labels = c("Base", "Extension"
, "Male", "Familiar w/ UBI"
, "Repulsed", "Relieved")
, dep.var.caption  = "Con + Pure Arm"
, dep.var.labels   = "UBI Ranking"
, notes = "HC Robust Standard Errors"
, report = ('v*c*sp')
)
install.packages("devtools")
usethis::edit_r_profile()
install.packages("png")
