, se_robust = se_robust
, vcov_cluster = vcov_cluster
, se_cluster = se_cluster
)
return(lm_out)
}
# Summaries
all_data = data.table(results_full)
all_data[, ideology_bin := case_when(is.na(ideology) ~ "missing",
ideology=="Very Liberal" ~ "liberal",
ideology=="Lean Liberal" ~ "liberal",
ideology=="Liberal" ~ "liberal",
ideology=="Very Conservative" ~ "conservative",
ideology=="Lean Conservative" ~ "conservative",
ideology=="Conservative" ~ "conservative",
TRUE ~ "moderate"), ]
all_data[, story := case_when(is.na(arm) ~ "missing",
arm=="control" ~ "",
arm=="purity_base" ~ "homeless",
arm=="purity_extension" ~ "homeless-cleaned",
arm=="fairness_base" ~ "bullying",
arm=="fairness_extension" ~ "bullying-addressed",
TRUE ~ "others"), ]
all_data[, FemaleReader := ifelse(gender!='Male', 1, 0), ]
all_data[, ubi_familiarity_dummy := ifelse(ubi_familiarity_bin!='yes', 1, 0), ]
all_data[, ubi := as.numeric(ubi_2), ]
all_data[ , .(ubi=mean(as.numeric(ubi_2)), .N), keyby=list(ideology_bin, story, FemaleReader, ubi_familiarity_bin) ]
# augment model with results from coefteest and coefci using
# the supplied variance/covariance matrix
apply_robust_estimates = function(model, vcovmatrix) {
model$robust.coeftest = coeftest(model, vcov. = vcovmatrix)
model$robust.estimate = model$robust.coeftest[, 'Estimate']
model$robust.std.error = model$robust.coeftest[, 'Std. Error']
model$robust.statistic = model$robust.coeftest[, 't value']
model$robust.p.value = model$robust.coeftest[, 'Pr(>|t|)']
model$robust.coefci = coefci(model, vcov. = vcovmatrix)
model$robust.ci.low = model$robust.coefci[, "2.5 %"]
model$robust.ci.high = model$robust.coefci[, "97.5 %"]
model
}
# liberals - homeless story
hom_lib_mod<-all_data[ ideology_bin=='liberal' & story != 'bullying' & story != 'bullying-addressed',  lm(ubi~story*FemaleReader)]
hom_lib_mod<-apply_robust_estimates(hom_lib_mod, vcovHC(hom_lib_mod))
# conservatives - homeless story
hom_con_mod<-all_data[ ideology_bin=='conservative' & story != 'bullying' & story != 'bullying-addressed',  lm(ubi~story*FemaleReader)]
hom_con_mod<-apply_robust_estimates(hom_con_mod, vcovHC(hom_con_mod))
# liberals - jacket story
jac_lib_mod<-all_data[ ideology_bin=='liberal' & story != 'homeless' & story != 'homeless-cleaned',  lm(ubi~story*FemaleReader)]
jac_lib_mod<-apply_robust_estimates(jac_lib_mod, vcovHC(jac_lib_mod))
# conservatives - jacket story
jac_con_mod<-all_data[ ideology_bin=='conservative' & story != 'homeless' & story != 'homeless-cleaned',  lm(ubi~story*FemaleReader)]
jac_con_mod<-apply_robust_estimates(jac_con_mod, vcovHC(jac_con_mod))
stargazer(hom_lib_mod, hom_con_mod,
type = 'text',
se = list(sqrt(diag(vcovHC(hom_lib_mod))),
sqrt(diag(vcovHC(hom_con_mod)))),
header=F,
report=('v*c*sp'),
add.lines=list(c("Ideology", "Liberal", "Conservative")))
stargazer(jac_lib_mod, jac_con_mod,
type = 'text',
se = list(sqrt(diag(vcovHC(jac_lib_mod))),
sqrt(diag(vcovHC(jac_con_mod)))),
header=F,
report=('v*c*sp'),
add.lines=list(c("Ideology", "Liberal", "Conservative")))
# augment model with results from coefteest and coefci using
# the supplied variance/covariance matrix
# liberals - homeless story
hom_lib_mod_2<-all_data[ ideology_bin=='liberal' & story != 'bullying' & story != 'bullying-addressed',  lm(ubi~story*ubi_familiarity_bin)]
hom_lib_mod_2<-apply_robust_estimates(hom_lib_mod_2, vcovHC(hom_lib_mod_2))
# conservatives - homeless story
hom_con_mod_2<-all_data[ ideology_bin=='conservative' & story != 'bullying' & story != 'bullying-addressed',  lm(ubi~story*ubi_familiarity_bin)]
hom_con_mod_2<-apply_robust_estimates(hom_con_mod_2, vcovHC(hom_con_mod_2))
# liberals - jacket story
jac_lib_mod_2<-all_data[ ideology_bin=='liberal' & story != 'homeless' & story != 'homeless-cleaned',  lm(ubi~story*ubi_familiarity_bin)]
jac_lib_mod_2<-apply_robust_estimates(jac_lib_mod_2, vcovHC(jac_lib_mod_2))
# conservatives - jacket story
jac_con_mod_2<-all_data[ ideology_bin=='conservative' & story != 'homeless' & story != 'homeless-cleaned',  lm(ubi~story*ubi_familiarity_bin)]
jac_con_mod_2<-apply_robust_estimates(jac_con_mod_2, vcovHC(jac_con_mod_2))
stargazer(hom_lib_mod_2, hom_con_mod_2,
type = 'text',
se = list(sqrt(diag(vcovHC(hom_lib_mod_2))),
sqrt(diag(vcovHC(hom_con_mod_2)))),
header=F,
report=('v*c*sp'),
add.lines=list(c("Ideology", "Liberal", "Conservative")))
stargazer(jac_lib_mod_2, jac_con_mod_2,
type = 'text',
se = list(sqrt(diag(vcovHC(jac_lib_mod_2))),
sqrt(diag(vcovHC(jac_con_mod_2)))),
header=F,
report=('v*c*sp'),
add.lines=list(c("Ideology", "Liberal", "Conservative")))
# Exploratory
results_armlibfair = results_clean %>% filter(ideology_bin == 'liberal' & grepl('fairness|control', arm))
results_armlibpure = results_clean %>% filter(ideology_bin == 'liberal' & grepl('purity|control', arm))
results_armconfair = results_clean %>% filter(ideology_bin == 'conservative' & grepl('fairness|control', arm))
results_armconpur = results_clean %>% filter(ideology_bin == 'conservative' & grepl('purity|control', arm))
model1_libfair = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibfair), clusters_in = NA)
model1_libpure = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibpure), clusters_in = NA)
model1_confair = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconfair) , clusters_in = NA)
model1_conpure = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconpur), clusters_in = NA)
stargazer(model1_libfair$lm, model1_libpure$lm
, model1_confair$lm, model1_conpure$lm
, type = stargazer_type, header = F
, se = list(model1_libfair$se_robust, model1_libpure$se_robust
, model1_confair$se_robust, model1_conpure$se_robust)
, title = "Moral Foundations Prelim Regression Specifications"
, column.labels = c("Lib + Fair", "Lib + Purity"
, "Con + Fair", "Con + Purity")
, notes = "HC Robust Standard Errors"
, report = ('v*c*sp')
)
par(mfrow=c(2,2))
which_in = 2
plot (model1_libfair$lm, which = which_in)
plot (model1_libpure$lm, which = which_in)
plot (model1_confair$lm, which = which_in)
plot (model1_conpure$lm, which = which_in)
arm_plot_df = function(model_in, group_in){
baseline_val = model_in$lm$coefficients[1]
arm_plot_df = data.frame(group = rep(group_in, 3)
, arm = c("control", "base", "extension")
, coef = model_in$lm$coefficients
, se = model_in$se_robust
) %>%
mutate(baseline = baseline_val
, ubi = case_when(arm == "control" ~ coef
, TRUE ~ coef + baseline))
return(arm_plot_df)
}
arm_plot_libpure = arm_plot_df(model_in = model1_libpure, group_in = "liberal_pure")
arm_plot_libfair = arm_plot_df(model_in = model1_libfair, group_in = "liberal_fair")
arm_plot_conpure = arm_plot_df(model_in = model1_conpure, group_in = "conservative_pure")
arm_plot_confair = arm_plot_df(model_in = model1_confair, group_in = "conservative_fair")
ggplot() +
geom_point(data = arm_plot_libpure, aes(x = baseline, y = ubi, shape = group, color = arm, size = 10)) +
geom_point(data = arm_plot_libfair, aes(x = baseline, y = ubi, shape = group, color = arm, size = 10)) +
geom_point(data = arm_plot_conpure, aes(x = baseline, y = ubi, shape = group, color = arm, size = 10)) +
geom_point(data = arm_plot_confair, aes(x = baseline, y = ubi, shape = group, color = arm, size = 10)) +
geom_abline(slope = 1, intercept = 0)
model1_libfair_gender = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level*gender, data = results_armlibfair), clusters_in = NA)
model1_libpure_gender = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level*gender, data = results_armlibpure), clusters_in = NA)
model1_confair_gender = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level*gender, data = results_armconfair) , clusters_in = NA)
model1_conpure_gender = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level*gender, data = results_armconpur), clusters_in = NA)
stargazer(model1_libfair_gender$lm, model1_libpure_gender$lm
, model1_confair_gender$lm, model1_conpure_gender$lm
, type = stargazer_type, header = F
, se = list(model1_libfair_gender$se_robust, model1_libpure_gender$se_robust
, model1_confair_gender$se_robust, model1_conpure_gender$se_robust)
, title = "Moral Foundations Prelim Regression Specifications"
, column.labels = c("Lib + Fair", "Lib + Purity"
, "Con + Fair", "Con + Purity")
, notes = "HC Robust Standard Errors"
, report = ('v*c*sp')
)
model1_libfair_familiarity = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level+ubi_familiarity_bin, data = results_armlibfair), clusters_in = NA)
model1_libpure_familiarity = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level+ubi_familiarity_bin, data = results_armlibpure), clusters_in = NA)
model1_confair_familiarity = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level+ubi_familiarity_bin, data = results_armconfair) , clusters_in = NA)
model1_conpure_familiarity = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level+ubi_familiarity_bin, data = results_armconpur), clusters_in = NA)
stargazer(model1_libfair_familiarity$lm, model1_libpure_familiarity$lm
, model1_confair_familiarity$lm, model1_conpure_familiarity$lm
, type = stargazer_type, header = F
, se = list(model1_libfair_familiarity$se_robust, model1_libpure_familiarity$se_robust
, model1_confair_familiarity$se_robust, model1_conpure_familiarity$se_robust)
, title = "Moral Foundations Prelim Regression Specifications"
, column.labels = c("Lib + Fair", "Lib + Purity"
, "Con + Fair", "Con + Purity")
, notes = "HC Robust Standard Errors"
, report = ('v*c*sp')
)
# Stargazer
rm(list=ls())
packages = c('openxlsx'
, 'tidyverse', 'data.table'
, 'visNetwork'
, 'lmtest', 'sandwich', 'car'
, 'gridExtra', 'stargazer', 'cowplot', 'corrplot'
, 'knitr')
lapply(packages, library, character.only = TRUE)
#### Uncomment and install if knitting to PDF ###
# install.packages("webshot")
# webshot::install_phantomjs()
stargazer_type = "text" # change to latex when ready to knit
grpstackbar_plot = ggplot() +
facet_grid( ~ ideology_bin) +
scale_fill_brewer(type = "div", palette = 5, direction = -1, aesthetics = "fill") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Ideology
plot_ideology = grpstackbar_plot +
geom_bar(data = results_clean %>%  group_by(ideology, ideology_bin) %>% summarise(count = n())
, aes(x = ideology, y = count, fill = ideology)
, stat = "identity") +
theme(legend.position = "left", axis.text.x=element_blank(), legend.text=element_text(size = 8))
rm(list=ls())
packages = c('openxlsx'
, 'tidyverse', 'data.table'
, 'visNetwork'
, 'lmtest', 'sandwich', 'car'
, 'gridExtra', 'stargazer', 'cowplot', 'corrplot'
, 'knitr')
lapply(packages, library, character.only = TRUE)
#### Uncomment and install if knitting to PDF ###
# install.packages("webshot")
# webshot::install_phantomjs()
stargazer_type = "text" # change to latex when ready to knit
results_raw_panel1 = read.csv("./data/study/MF Framing Pilot - Full Recruitment - Panel 1_November 20, 2019_07.25.csv", stringsAsFactors = FALSE) %>%   filter(!grepl("Start|Import", StartDate)) %>%
mutate(panel = 1)
results_raw_panel2_10fem = read.csv("./data/study/MF Framing Pilot - Full Recruitment - Panel 2 - 10 Female Control_November 22, 2019_17.34.csv", stringsAsFactors = FALSE) %>%
filter(!grepl("Start|Import", StartDate)) %>%
mutate(panel = 2)
results_raw_panel2_nov20 = read.csv("./data/study/MF Framing Pilot - Full Recruitment - Panel 2_November 20, 2019_07.26.csv", stringsAsFactors = FALSE) %>%
filter(!grepl("Start|Import", StartDate)) %>%
mutate(panel = 2)
results_raw_panel2_nov26 = read.csv("./data/study/MF Framing Pilot - Full Recruitment - Panel 2_November 26, 2019_07.51.csv", stringsAsFactors = FALSE) %>%
filter(!grepl("Start|Import", StartDate)) %>%
mutate(panel = 2)
participant_detail_1 = read.csv("./data/study/prolific_export_5dd4a350108b6748b25b5de1-with_November_24_2019.csv", stringsAsFactors = FALSE)
participant_detail_2 = read.csv("./data/study/prolific_export_5dd4a34135582248315dfdca.csv", stringsAsFactors = FALSE)
participant_detail_3 = read.csv("./data/study/prolific_export_5dd86d9f8f45b98265115ada.csv", stringsAsFactors = FALSE)
participant_detail_4 = read.csv("./data/study/prolific_export_5dd4a350108b6748b25b5de1.csv", stringsAsFactors = FALSE)
participant_detail_5 = read.csv("./data/study/prolific_export_5dd4a350108b6748b25b5de1-up-to_November_26_2019.csv", stringsAsFactors = FALSE)
# Stack panel data (509 obs x 63 vars)
results_stacked = bind_rows(results_raw_panel1
, results_raw_panel2_10fem
, results_raw_panel2_nov20
# , results_raw_panel2_nov24
, results_raw_panel2_nov26
) %>%
# Duplicate responses are a product of our multiple data extracts, remove as-is 410 obs x 63 vars)
distinct(ResponseId, .keep_all= TRUE)
# Identify if the same person filled out the survey >1x
results_ids_dedup = results_stacked %>%
select(PROLIFIC_PID, ResponseId, StartDate) %>%
group_by(PROLIFIC_PID) %>%
summarize(count = n()
, min_date = min(StartDate))
# Keep only their first submission (405 obs x 64 vars [count will tell us who filled out 2x])
results_dedup = results_stacked %>%
merge(results_ids_dedup
, by.x = c("PROLIFIC_PID", "StartDate")
, by.y = c("PROLIFIC_PID", "min_date")
, all.x = TRUE) %>%
filter(!is.na(count))
# Stack participant details (723 obs x 21 vars)
participaipant_detail_stacked =  bind_rows(participant_detail_1
, participant_detail_2
, participant_detail_3
, participant_detail_4
, participant_detail_5)  %>%
# Duplicate responses are a product of our multiple data extracts, remove as-is (418 obs x 21 vars)
distinct(session_id, .keep_all= TRUE) %>%
# Remove vars that will be in results as well (418 obs x 19 vars)
select(-status, -age)
# Identify if the same person filled out the survey >1x
participaipant_ids_dedup = participaipant_detail_stacked %>%
select(participant_id, session_id, started_datetime) %>%
group_by(participant_id) %>%
summarize(count = n()
, min_date = min(started_datetime))
# Keep only their first submission (413 obs x 18 vars [count will tell us who filled out 2x])
participaipant_detail_dedup = participaipant_detail_stacked %>%
merge(participaipant_ids_dedup
, by.x = c("participant_id", "started_datetime")
, by.y = c("participant_id", "min_date")
, all.x = TRUE) %>%
filter(!is.na(count)) %>% select(-count, -session_id)
# Merge for final dataset (405 obs x 81 vars)
results_full_dedup = merge(results_dedup
, participaipant_detail_dedup
, by.x = "PROLIFIC_PID"
, by.y = "participant_id"
, all.x = TRUE)
# Adjust all variable names to remove '-' and '.' + lowercase
names(results_full_dedup) = tolower(gsub(x = names(results_full_dedup), pattern = "\\-|\\.", replacement = "_"))
# Discrete variables as factors (manual ordering for plotting)
ideology_levels = c("Very Liberal", "Lean Liberal", "Liberal", "Moderate", "Conservative", "Lean Conservative", "Very Conservative")
ubi_group_levels = c("Promoter", "Passive", "Detractor")
ubi_familiarity_levels = c("Extremely familiar", "Very familiar", "Moderately familiar", "Slightly familiar", "Not familiar at all")
results_full = results_full_dedup  %>%
# Define arms and nodes
mutate(arm = case_when(grepl('a', fc_b_1, ignore.case = TRUE) ~ "purity_base"
, grepl('a', fc_c_1, ignore.case = TRUE) ~ "purity_extension"
, grepl('a', fc_d_1, ignore.case = TRUE) ~ "fairness_base"
, grepl('a', fc_e_1, ignore.case = TRUE) ~ "fairness_extension"
, TRUE ~ "control") %>% factor(levels = c("control", "purity_base", "purity_extension", "fairness_base", "fairness_extension"))
, node = paste0(arm, "_panel_", panel)
, arm_level = case_when(grepl('base', arm) ~ 'base'
, grepl('extension', arm) ~ 'extension'
, TRUE ~ 'control') %>% factor(levels = c("control", "base", "extension"))
# Combine reaction vars from different arms
, purity_q1_self = case_when(grepl('a', fc_b_1, ignore.case = TRUE) ~ fc_b_1
, TRUE ~ fc_c_1)
, purity_q2_repulsed = case_when(grepl('a', fc_b_2, ignore.case = TRUE) ~ fc_b_2
, TRUE ~ fc_c_2)
, purity_q3_injustice = case_when(grepl('a', fc_b_3, ignore.case = TRUE) ~ fc_b_3
, TRUE ~ fc_c_3)
, purity_q4_relieved = fc_c_4
, fairness_q1_self = case_when(grepl('a', fc_d_1, ignore.case = TRUE) ~ fc_d_1
, TRUE ~ fc_e_1)
, fairness_q2_pain = case_when(grepl('a', fc_d_2, ignore.case = TRUE) ~ fc_d_2
, TRUE ~ fc_e_2)
, fairness_q3_injustice = case_when(grepl('a', fc_d_3, ignore.case = TRUE) ~ fc_d_3
, TRUE ~ fc_e_3)
, fairness_q4_relieved = fc_e_4
, open_text_reaction = q3_fc2
# Factor variables
, ideology = factor(polispect, levels = ideology_levels)
, ideology_bin = case_when(is.na(ideology) ~ "missing"
, ideology == "Very Liberal" ~ "liberal"
, ideology == "Lean Liberal" ~ "liberal"
, ideology == "Liberal" ~ "liberal"
, ideology == "Very Conservative" ~ "conservative"
, ideology == "Lean Conservative" ~ "conservative"
, ideology == "Conservative" ~ "conservative"
, TRUE ~ "moderate")
, ubi_group = factor(ubi_2_nps_group, levels = ubi_group_levels)
, ubi_familiarity = factor(ubi_f, levels = ubi_familiarity_levels)
, ubi_familiarity_bin = case_when(ubi_f == "Not familiar at all" ~ 0
, TRUE ~ 1)
# Numeric variables
, ubi_number = as.numeric(ubi_2))
results_clean = results_full %>%
select(prolific_pid, panel, arm, node, arm_level
, ideology, ideology_bin, age, gender, urban, employment_status, student_status
, purity_q1_self, purity_q2_repulsed, purity_q3_injustice, purity_q4_relieved
, fairness_q1_self, fairness_q2_pain, fairness_q3_injustice, fairness_q4_relieved
, open_text_reaction
, ubi_number, ubi_group, ubi_familiarity, ubi_familiarity_bin)
results_clean = results_clean %>% mutate(
purity_q2_repulsed_bin = case_when(is.na(purity_q2_repulsed) ~ NA_real_
, purity_q2_repulsed %in% c("None at all", "A little") ~ 0
, purity_q2_repulsed %in% c("A moderate amount", "A great deal", "A lot") ~ 1
, TRUE ~ NA_real_)
, purity_q4_relieved_bin = case_when(is.na(purity_q4_relieved) ~ NA_real_
, purity_q4_relieved %in% c("None at all", "A little") ~ 0
, purity_q4_relieved %in% c("A moderate amount", "A great deal", "A lot") ~ 1
, TRUE ~ NA_real_)
, fairness_q2_pain_bin = case_when(is.na(fairness_q2_pain) ~ NA_real_
, fairness_q2_pain %in% c("None at all", "A little") ~ 0
, fairness_q2_pain %in% c("A moderate amount", "A great deal", "A lot") ~ 1
, TRUE ~ NA_real_)
, fairness_q4_relieved_bin = case_when(is.na(fairness_q4_relieved) ~ NA_real_
, fairness_q4_relieved %in% c("None at all", "A little") ~ 0
, fairness_q4_relieved %in% c("A moderate amount", "A great deal", "A lot") ~ 1
, TRUE ~ NA_real_)
)
# Subset for arms (including control in each)
results_armlibfair = results_clean %>% filter(ideology_bin == 'liberal' & grepl('fairness|control', arm))
results_armlibpure = results_clean %>% filter(ideology_bin == 'liberal' & grepl('purity|control', arm))
results_armconfair = results_clean %>% filter(ideology_bin == 'conservative' & grepl('fairness|control', arm))
results_armconpur = results_clean %>% filter(ideology_bin == 'conservative' & grepl('purity|control', arm))
arm_counts_bypanel = results_clean %>%
group_by(arm, panel, node) %>%
summarise(count = n())
nodes = data.frame(
id = 1:8
, group = c("ideology", "ideology"
, "fairness", "fairness"
, "purity", "purity"
, "control"
, "treatment"
)
, label = c("All Liberals", "All Conservatives"
, "Fairness Base"
, "Fairness Extension"
, "Purity Base"
, "Purity Extension"
, "Control"
, "Treatment"
)
, level = c(1, 1, 3, 4, 3, 4, 2, 2)
, shape = rep("box", 8)
)
edges = data.frame(
from = c(1, 2, 1, 2, 8, 8, 3, 5)
, to = c(7, 7, 8, 8, 3, 5, 4, 6)
, dashes = c(rep(FALSE, 6), rep(TRUE, 2))
)
visNetwork(nodes, edges) %>%
visEdges(arrows = "to") %>%
visHierarchicalLayout(direction = "LR")
grpstackbar_plot = ggplot() +
facet_grid( ~ ideology_bin) +
scale_fill_brewer(type = "div", palette = 5, direction = -1, aesthetics = "fill") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Ideology
plot_ideology = grpstackbar_plot +
geom_bar(data = results_clean %>%  group_by(ideology, ideology_bin) %>% summarise(count = n())
, aes(x = ideology, y = count, fill = ideology)
, stat = "identity") +
theme(legend.position = "left", axis.text.x=element_blank(), legend.text=element_text(size = 8))
# Age
plot_age = grpstackbar_plot +
geom_bar(data = results_clean %>%  group_by(age, ideology, ideology_bin) %>% summarise(count = n())
, aes(x = age, y = count, fill = ideology)
, stat = "identity", show.legend = FALSE)
# Gender
plot_gender = grpstackbar_plot +
geom_bar(data = results_clean %>%  group_by(gender, ideology, ideology_bin) %>% summarise(count = n())
, aes(x = gender, y = count, fill = ideology)
, stat = "identity", show.legend = FALSE)
# Urban
plot_urban = grpstackbar_plot +
geom_bar(data = results_clean %>%  group_by(urban, ideology, ideology_bin) %>% summarise(count = n())
, aes(x = urban, y = count, fill = ideology)
, stat = "identity", show.legend = FALSE)
grid.arrange(plot_ideology, plot_age
, plot_gender, plot_urban
, nrow = 2)
response_levels = c("A great deal", "A lot", "A moderate amount", "A little", "None at all")
results_response = results_clean %>%
select(panel, arm
, purity_q1_self, purity_q2_repulsed, purity_q3_injustice, purity_q4_relieved
, fairness_q1_self, fairness_q2_pain, fairness_q3_injustice, fairness_q4_relieved) %>%
gather(prompt, value, -panel, -arm) %>%
filter(!is.na(value)) %>%
group_by(panel, arm, prompt, value) %>% summarise(count = n()) %>%
mutate(response = factor(value, levels = response_levels))
ggplot(data = results_response
, aes(x = prompt, y = response, fill = count)) +
geom_tile() +
facet_grid(rows = vars(arm), cols = vars(panel)) +
scale_fill_distiller(direction = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(results_response)
results_response = results_clean %>%
select(panel, arm
, purity_q1_self, purity_q2_repulsed, purity_q3_injustice, purity_q4_relieved
, fairness_q1_self, fairness_q2_pain, fairness_q3_injustice, fairness_q4_relieved)
View(results_full_dedup)
unique(results_full_dedup$fc_b_1)
results_full_dedup %>% select(ubi_number, arm_level, ideology_bin, arm) %>% distinct()
results_clean %>% select(ubi_number, arm_level, ideology_bin, arm) %>% distinct()
model1_libfair_familiarity = my_lm_calcs(lm_in = lm(ubi_number ~ arm_level+ubi_familiarity_bin, data = results_armlibfair), clusters_in = NA)
response_levels = c("A great deal", "A lot", "A moderate amount", "A little", "None at all")
results_response = results_clean %>%
select(panel, arm
, purity_q1_self, purity_q2_repulsed, purity_q3_injustice, purity_q4_relieved
, fairness_q1_self, fairness_q2_pain, fairness_q3_injustice, fairness_q4_relieved) %>%
gather(prompt, value, -panel, -arm) %>%
filter(!is.na(value)) %>%
group_by(panel, arm, prompt, value) %>% summarise(count = n()) %>%
mutate(response = factor(value, levels = response_levels))
ggplot(data = results_response
, aes(x = prompt, y = response, fill = count)) +
geom_tile() +
facet_grid(rows = vars(arm), cols = vars(panel)) +
scale_fill_distiller(direction = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
results_response_bin = results_clean %>%
select(ideology_bin, arm
, purity_q2_repulsed_bin, purity_q4_relieved_bin
, fairness_q2_pain_bin, fairness_q4_relieved_bin) %>%
gather(prompt, value, -ideology_bin, -arm) %>%
filter(!is.na(value)) %>%
group_by(ideology_bin, arm, prompt, value) %>% summarise(count = n())
ggplot(data = results_response_bin
, aes(x = prompt, y = value, fill = count)) +
geom_tile() +
facet_grid(rows = vars(arm), cols = vars(ideology_bin)) +
scale_fill_distiller(direction = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# One for Libs/Cons
results_clean %>%
select(ideology_bin, arm
, purity_q2_repulsed_bin, purity_q4_relieved_bin
, fairness_q2_pain_bin, fairness_q4_relieved_bin) %>%
gather(prompt, value, -ideology_bin, -arm) %>%
filter(!is.na(value)) %>%
group_by(ideology_bin, arm, prompt) %>% mutate(total_value = sum(value))
results_response_bin = results_clean %>%
select(ideology_bin, arm
, purity_q2_repulsed_bin, purity_q4_relieved_bin
, fairness_q2_pain_bin, fairness_q4_relieved_bin) %>%
gather(prompt, value, -ideology_bin, -arm) %>%
filter(!is.na(value)) %>%
group_by(ideology_bin, arm, prompt) %>% mutate(total_value = sum(value))
group_by(ideology_bin, arm, prompt, value) %>% summarise(share = sum(value)/total_value)
results_response_bin = results_clean %>%
select(ideology_bin, arm
, purity_q2_repulsed_bin, purity_q4_relieved_bin
, fairness_q2_pain_bin, fairness_q4_relieved_bin) %>%
gather(prompt, value, -ideology_bin, -arm) %>%
filter(!is.na(value)) %>%
group_by(ideology_bin, arm, prompt) %>% mutate(total_value = sum(value)) %>%
group_by(ideology_bin, arm, prompt, value) %>% summarise(share = sum(value)/total_value)
results_response_bin = results_clean %>%
select(ideology_bin, arm
, purity_q2_repulsed_bin, purity_q4_relieved_bin
, fairness_q2_pain_bin, fairness_q4_relieved_bin) %>%
gather(prompt, value, -ideology_bin, -arm) %>%
filter(!is.na(value)) %>%
group_by(ideology_bin, arm, prompt) %>% mutate(total_value = sum(value)) %>%
group_by(ideology_bin, arm, prompt, value) %>% summarise(share = sum(value)/max(total_value))
ggplot(data = results_response_bin
, aes(x = prompt, y = value, fill = share)) +
geom_tile() +
facet_grid(rows = vars(arm), cols = vars(ideology_bin)) +
scale_fill_distiller(direction = 1) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# One for Libs/Cons
View(results_response_bin)
results_clean %>%
select(ideology_bin, arm
, purity_q2_repulsed_bin, purity_q4_relieved_bin
, fairness_q2_pain_bin, fairness_q4_relieved_bin) %>%
gather(prompt, value, -ideology_bin, -arm) %>%
filter(!is.na(value))
View(results_clean)
View(results_full_dedup)
